/** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  File name     :  ClockSolver.java
 *  Purpose       :  The main program for the ClockSolver class
 *  @see
 *  @author       :  T. Herrmann
 *  Date written  :  2017-02-17
 *  Description   :  None
  *
 *  Notes         :  None right now.  I'll add some as they occur.
 *  Warnings      :  None
 *  Exceptions    :  IllegalArgumentException when the input arguments are "hinky"
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  Revision History
 *  ---------------
 *            Rev      Date     Modified by:  Reason for change/modification
 *           -----  ----------  ------------  -----------------------------------------------------------
 *  @version 1.0.0  2017-02-17  T. Herrmann   Initial writing and release
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

public class ClockSolver {
  /**
   *  Class field definintions go here
   */
   private final double MAX_TIME_SLICE_IN_SECONDS  = 1800.00;
   private final double SECONDS_IN_TWELVE_HOURS    = 43200;
   private final double MAX_EPSILON_IN_DEGREES     = 30.0;
   private final double DEFAULT_TIME_SLICE_SECONDS = 60.0;
   private final double EPSILON_VALUE              = 0.1;      // small value for double-precision comparisons
   private double epsilonValue = EPSILON_VALUE;
   private double timeSlice = DEFAULT_TIME_SLICE_SECONDS;
   private double inputAngle;
   private Clock clock;

  /**
   *  Constructor
   *  This just calls the superclass constructor, which is "Object"
   */
   public ClockSolver() {
      super();
      clock = new Clock();
   }

  /**
   *  Method to handle all the input arguments from the command line
   *   this sets up the variables for the simulation
   */
   public void handleInitialArguments( String args[] ) {
     // args[0] specifies the angle for which you are looking
     //  your simulation will find all the angles in the 12-hour day at which those angles occur
     // args[1] if present will specify a time slice value; if not present, defaults to 60 seconds
     // you may want to consider using args[2] for an "angle window"

      System.out.println( "\n   Hello world, from the ClockSolver program!!\n\n" ) ;
      if( 0 == args.length || (Double.parseDouble(args[0]) >= 360.0 || Double.parseDouble(args[0]) < 0.0)) {
         System.out.println( "   Sorry you must enter at least one valid argument\n" +
                             "   Usage: java ClockSolver <angle> [timeSlice]\n" +
                             "   Please try again..........." );
         System.exit( 1 );
      }

      inputAngle = clock.validateAngleArg(args[0]);
      
      if(args.length > 1 && Double.parseDouble(args[1]) <= MAX_TIME_SLICE_IN_SECONDS && Double.parseDouble(args[1]) > 0.0) {
          timeSlice = clock.validateTimeSliceArg(args[1]);
      }
      else if(args.length > 1) {
          System.out.println("Your TimeSlice (in seconds) argument is out of bounds: (0,1800]");
          System.exit( 1 );
      }
      
      if(args.length > 2 && Double.parseDouble(args[2]) <= MAX_EPSILON_IN_DEGREES && Double.parseDouble(args[2]) > 0.0) {
          epsilonValue = Double.parseDouble(args[2]);
      }
      else if (args.length > 2) {
          System.out.println("Your Epsilon (in degrees) argument is out of bounds: (0,30]");
          System.exit( 1 );
      }      
   }
   
   /**
   *  Method to initiate simulation
   *  Checks to see if angle generated by clock is within the specified range of the input angle
   */
   public void checkForAngle() {
       long iterations = (long)(SECONDS_IN_TWELVE_HOURS/timeSlice);
       for(int i = 0; i < iterations; i++) {
           if(inputAngle < 180) {
               if(clock.getHandSmallerAngle() > (inputAngle - epsilonValue) && 
                  clock.getHandSmallerAngle() < (inputAngle + epsilonValue)) {
                    System.out.println("" + clock.toString());
               }
           }
           else {
               if(clock.getHandLargerAngle() > (inputAngle - epsilonValue) && 
                  clock.getHandLargerAngle() < (inputAngle + epsilonValue)) {
                    System.out.println("" + clock.toString());
               }
           }
           clock.tick();         
        }  
   }
       
   

  /**
   *  The main program starts here
   *  remember the constraints from the project description
   *  @see  http://bjohnson.lmu.build/cmsi186web/homework04.html
   *  @param  args  String array of the arguments from the command line
   *                args[0] is the angle for which we are looking
   *                args[1] is the time slice; this is optional and defaults to 60 seconds
   */
   public static void main( String args[] ) {
      ClockSolver cse = new ClockSolver();
      cse.handleInitialArguments( args );
      cse.checkForAngle();
      System.exit( 0 );
   }
}