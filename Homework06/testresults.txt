
  Hello, world, from the BrobInt program!!

    TESTING CONSTRUCTOR AND CONSTANTS:
    ==================================
    Test 001: Making a new BrobInt: 
      expecting: 144127909719710664015092431502440849849506284148982076191826176553
        and got: 144127909719710664015092431502440849849506284148982076191826176553

    Test 002: Making a second new BrobInt [same as first]: 
      expecting: 144127909719710664015092431502440849849506284148982076191826176553
        and got: 144127909719710664015092431502440849849506284148982076191826176553
    Test 003: Comparing equality of g1 and g2 with 'equals()': 
      expecting: true
        and got: true

    Test 004: Making a third new BrobInt [differs at position 47    |]: 
           [position indicated by down arrow]                  v   
      expecting: 144127909719710664015092431502440849849506284108982076191826176553
        and got: 144127909719710664015092431502440849849506284108982076191826176553
          g1 is: 144127909719710664015092431502440849849506284148982076191826176553
    Test 005: Comparing equality of g1 and g3 [detect different digit]: 
      expecting: false
        and got: false

    Test 006: Making a fourth new BrobInt [same as g3 but truncated]: 
      expecting: 14412790971971066401509243150244084984950628410898207
        and got: 14412790971971066401509243150244084984950628410898207
    Test 007: Comparing equality of g3 and g4 [detect different length prior to detecting different digit]: 
      expecting: false
        and got: false

    Test 008: Making a fifth new BrobInt, checking BrobInt.ZERO: 
      expecting: 0
        and got: 0

    Test 009: Making a sixth new BrobInt, checking BrobInt.ONE: 
      expecting: 1
        and got: 1

    Test 010: Making a seventh new BrobInt, checking BrobInt.TEN: 
      expecting: 10
        and got: 10


    TESTING VALUEOF( LONG ) METHOD:
    ===============================

    Test 011: Creating several long type values to check the 'valueOf()' method: 
      expecting: 9223372036854775807
        and got: 9223372036854775807
      expecting: -9223372036854775808
        and got: -9223372036854775808
      expecting: 1234567890
        and got: 1234567890
    Test 012: Now testing 'valueOf()' method: 
      expecting: 9223372036854775807
        and got: 9223372036854775807
      expecting: -9223372036854775808
        and got: -9223372036854775808
      expecting: 1234567890
        and got: 1234567890


    TESTING ADD() AND ADDINT() METHODS:
    =======================================

    Test 013: Making an eleventh and twelfth new BrobInt, calling add method: 
      expecting: 10
        and got: 10
      expecting: 20
        and got: 20
    Test 014: Adding g11 and g12: 
      expecting: 30 and got 30

    Test 015: Making a thirteenth new BrobInt, calling add methods: 
      expecting: 234567
        and got: 234567
    Test 016: Adding g11 and g13 [10 + 234567] using bytes: 
      expecting: 234577 and got 234577
    Test 018: Adding g13 and g11 [234567 + 10] using bytes: 
      expecting: 234577 and got 234577

    Test 020: Making a fourteenth new BrobInt, calling add methods: 
      expecting: -234567
        and got: -234567

    Test 021: Making a fifteenth new BrobInt, calling add methods: 
      expecting: -10
        and got: -10
    Test 022: Adding g14 and g15 [-234567 + -10] using bytes: 
      expecting: -234577 and got -234577
    Test 024: Adding g15 and g14 [-10 + -234567] using bytes: 
      expecting: -234577 and got -234577

    Test 026: Making a sixteenth new BrobInt, calling add methods: 
      expecting: -999999
        and got: -999999
    Test 027: Adding g14 and g16 [-234567 + -999999] using bytes: 
      expecting: -1234566 and got -1234566
    Test 029: Adding g16 and g14 [-999999 + -234567] using bytes: 
      expecting: -1234566 and got -1234566

      Test 031: Adding g1 and g4 using bytes: 
      expecting: 144127909719725076806064402568842359092656528233967026820237074760
        and got: 144127909719725076806064402568842359092656528233967026820237074760


    TESTING COMPARETO() METHOD:
    ===========================

    Test 033: Checking compareTo() method on g1 and g2: 
      expecting: 0 and got: 0

    Test 034: Checking compareTo() method on g2 and g1: 
      expecting: 0 and got: 0

    Test 035: Checking compareTo() method on g1 and g3: 
      expecting: positive value and got: 1

    Test 036: Checking compareTo() method on g3 and g1: 
      expecting: negative value and got: -1

    Test 037: Checking compareTo() method on g3 and g4: 
      expecting: positive value and got: 1


    TESTING SUBTRACTBYTE() METHOD:
    ==============================

      Test 038: Subtracting g13 take away g11 [234567 - 10] using bytes: 
      expecting: 234557
        and got: 234557

      Test 039: Subtracting g11 take away g13 [10 - 234567] using bytes: 
      expecting: -234557
        and got: -234557

      Test 040: Subtracting g13 take away g15 [234567 - (-10)] using bytes: 
      expecting: 234577
        and got: 234577

      Test 041: Subtracting g15 take away g13 [(-10) - 234567] using bytes: 
      expecting: -234577
        and got: -234577

      Test 042: Subtracting g14 take away g16 [(-234567) - (-999999)] using bytes: 
      expecting: 765432
        and got: 765432

      Test 043: Subtracting g16 take away g14 [(-999999) - (-234567)] using bytes: 
      expecting: -765432
        and got: -765432

      Test 044: Subtracting g1 take away g1 [too long to list] using bytes: 
      expecting: 000000000000000000000000000000000000000000000000000000000000000000
        and got: 0


    TESTING MULTIPLY() METHOD:
    ==========================

      Test 045: Multiplying g7 by g12 [10 * 20]: 
      expecting: 200
        and got: 200

    Test 046: Making a seventeenth new BrobInt: 
      expecting: 765
        and got: 765

    Test 047: Making a eightteenth new BrobInt: 
      expecting: 23
        and got: 23

    Test 048: Making a nineteenth new BrobInt: 
      expecting: 56789
        and got: 56789

    Test 049: Making a twentieth new BrobInt: 
      expecting: 37
        and got: 37

      Test 050: Multiplying g17 by g18 [765 * 23]: 
      expecting: 17595
        and got: 17595

      Test 051: Multiplying g18 by g20 [23 * 37]: 
      expecting: 851
        and got: 851

      Test 052: Multiplying g19 by g20 [56789 * 37]: 
      expecting: 2101193
        and got: 2101193

      Test 053: Multiplying g18 by g17 [23 * 765]: 
      expecting: 17595
        and got: 17595

      Test 054: Multiplying g17 by g19 [765 * 56789]: 
      expecting: 43443585
        and got: 43443585

      Test 055: Multiplying g20 by g19 [37 * 56789]: 
      expecting: 2101193
        and got: 2101193


    TESTING DIVIDE() METHOD:
    ========================

      Test 056: Dividing g19 by g20 [56789 / 37]: 
      expecting: 1534
        and got: 1534

      Test 057: Dividing g17 by g20 [765 / 37]: 
      expecting: 20
        and got: 20


    TESTING REMAINDER() METHOD:
    ===========================

      Test 058: Modding g17 by g18 [765 % 23]: 
      expecting: 6
        and got: 6

      Test 059: Modding g19 by g20 [56789 % 37]: 
      expecting: 31
        and got: 31


Random Test Key:
Random Value One (+,-,x,/,mod) Random Value Two = BigInteger Answer -> BrobInt Answer
*All answers tested using BigInteger*


	10 Addition Tests using random values from: 
	[ -4611686018427387903 , 4611686018427387904 )

correct  -2748296906691896319 + -1122593366374185983 = -3870890273066082302 -> -3870890273066082302

correct  3403056694012480513 + -4545528375987224575 = -1142471681974744062 -> -1142471681974744062

correct  -3072134640401258495 + -228631398076568575 = -3300766038477827070 -> -3300766038477827070

correct  1342117893266532353 + -1725662149616442367 = -383544256349910014 -> -383544256349910014

correct  3668831533398465537 + -2935596628870852607 = 733234904527612930 -> 733234904527612930

correct  896505400848684033 + -2580158805492133887 = -1683653404643449854 -> -1683653404643449854

correct  3169121467851780097 + -2276912565949951999 = 892208901901828098 -> 892208901901828098

correct  -937469329127242751 + 812210953738579969 = -125258375388662782 -> -125258375388662782

correct  -1048687748282613759 + -3606703844758866943 = -4655391593041480702 -> -4655391593041480702

correct  1786729264355158017 + -3473010138637912063 = -1686280874282754046 -> -1686280874282754046




	10 Subtraction Tests using random values from: 
	[ -4611686018427387903 , 4611686018427387904 )

correct  1873151343086865409 - -2699455901291746303 = 4572607244378611712 -> 4572607244378611712

correct  1541889899208297473 - -1017746885937960959 = 2559636785146258432 -> 2559636785146258432

correct  -3939200900297139199 - 4497344503326731265 = -8436545403623870464 -> -8436545403623870464

correct  2793594660741240833 - -1911518227518048255 = 4705112888259289088 -> 4705112888259289088

correct  4005081729815456769 - 4252642221521727489 = -247560491706270720 -> -247560491706270720

correct  -2974038398098233343 - -2674744517737692159 = -299293880360541184 -> -299293880360541184

correct  -484330218016380927 - 3595513306271519745 = -4079843524287900672 -> -4079843524287900672

correct  4240313062560225281 - 2747998538032839681 = 1492314524527385600 -> 1492314524527385600

correct  2705066295963278337 - 1252242864586829825 = 1452823431376448512 -> 1452823431376448512

correct  1476626009287302145 - -2989444356652179455 = 4466070365939481600 -> 4466070365939481600




	10 Multiplication Tests using random values from: 
	[ -4611686018427387903 , 4611686018427387904 )

correct  4114123034768870401 x -2911375149092503551 = -11977755563735123234240081725351293951 -> -11977755563735123234240081725351293951

correct  -3909961165220543487 x 1097209246363311105 = -4290045543401446254524844024962523135 -> -4290045543401446254524844024962523135

correct  -2738904531000390655 x 477881692683152385 = -1308872333372022301512611571894962175 -> -1308872333372022301512611571894962175

correct  2813100967623054337 x -3557024475915088895 = -10006268995055624306949509644770287615 -> -10006268995055624306949509644770287615

correct  -1662920113015927807 x 2491176839224647681 = -4142628071026112937971748170905965567 -> -4142628071026112937971748170905965567

correct  1489494165650364417 x -3361139816734944255 = -5006398146961834556789080938930574335 -> -5006398146961834556789080938930574335

correct  1891728548940569601 x 3782182051817835521 = 7154861764714420214031816388670597121 -> 7154861764714420214031816388670597121

correct  -1581226944525390847 x 2507826468808553473 = -3965442784674049401748721502024261631 -> -3965442784674049401748721502024261631

correct  2442874952244090881 x -3212298658995155967 = -7847243933186548810826884778717436927 -> -7847243933186548810826884778717436927

correct  -3729487803705848831 x 3809492263614302209 = -14207454935461326445797155876103367679 -> -14207454935461326445797155876103367679




	10 Division Tests using random values from: 
	[ -4611686018427387903 , 0) U (0 , 4611686018427387904 )

correct  -3283320383136360447 / -2407405919859549183 = 1 -> 1

correct  857681007935988737 / 320309845987438593 = 2 -> 2

correct  -1672499620450004991 / -2147565132345653247 = 0 -> 0

correct  -4441792564402558975 / -2248845424471177215 = 1 -> 1

correct  1959963846754640897 / 1315457989781951489 = 1 -> 1

correct  -268993166273486847 / -2327816683311512575 = 0 -> 0

correct  -2088365218418626559 / -2515046375040892927 = 0 -> 0

correct  1421142370391552001 / -2258488608935198719 = 0 -> 0

correct  -2432451406630774783 / -3370571138673699839 = 0 -> 0

correct  -963023652938141695 / 4419991106748879873 = 0 -> 0




	10 Remainder Tests using random values from: 
	(0 , 9223372036854775807 )

correct  5671125507642041344 mod 3487523794631721984 = 2183601713010319360 -> 2183601713010319360

correct  1255106883387671552 mod 2717292843422897152 = 1255106883387671552 -> 1255106883387671552

correct  7634796485471188992 mod 5470308902045770752 = 2164487583425418240 -> 2164487583425418240

correct  7284059438604980224 mod 7667493787490382848 = 7284059438604980224 -> 7284059438604980224

correct  6780003851703581696 mod 3182224471850831872 = 415554908001917952 -> 415554908001917952

correct  1372099030803360768 mod 2305659759742093312 = 1372099030803360768 -> 1372099030803360768

correct  2650355651510985728 mod 1131055395738872832 = 388244860033240064 -> 388244860033240064

correct  2875467550723873792 mod 1289095592514920448 = 297276365694032896 -> 297276365694032896

correct  8572181254025409536 mod 8948188851990447104 = 8572181254025409536 -> 8572181254025409536

correct  4173276461923607552 mod 7771049332940638208 = 4173276461923607552 -> 4173276461923607552



   Welcome to the Fibonacci sequence number finder!



   Starting from zero, the 23rd Fibonacci number is: 
17711


   Welcome to the Fibonacci sequence number finder!



   Starting from zero, the 100th Fibonacci number is: 
218922995834555169026


   Welcome to the Fibonacci sequence number finder!



   Starting from zero, the 250th Fibonacci number is: 
4880197746793002076754294951020699004973287771475874


   Welcome to the Fibonacci sequence number finder!



   Starting from zero, the 1000th Fibonacci number is: 
26863810024485359386146727202142923967616609318986952340123175997617981700247881689338369654483356564191827856161443356312976673642210350324634850410377680367334151172899169723197082763985615764450078474174626


   Welcome to the Fibonacci sequence number finder!



   Starting from zero, the 10000th Fibonacci number is: 

